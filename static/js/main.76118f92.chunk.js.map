{"version":3,"sources":["components/Icon.jsx","components/DegreeSymbol.jsx","components/Menu.jsx","components/IconBtn.jsx","components/Inputfield.jsx","components/hooks/useInput.js","components/LocationsList.jsx","components/helpers/conversions.js","components/getWeatherData.js","components/LocationSearch.jsx","components/ForecastViewMenu.jsx","components/CurrentForecast.jsx","components/AdditionalInfo.jsx","components/ForecastDay.jsx","components/ForecastWeekly.jsx","components/ForecastView.jsx","RainOrShine.jsx","reportWebVitals.js","index.js"],"names":["Icon","imgData","imgClasses","addClasses","className","src","path","alt","DegreeSymbol","unitType","symbol","String","fromCharCode","Menu","handleUnitUpdate","useState","isActive","setIsActive","handleNewUnitType","e","newUnitType","target","id","onClick","type","name","value","htmlFor","icons","arrow_back","search","IconBtn","icon","handleClick","Inputfield","handleChange","handleClear","handleSubmit","placeholder","onSubmit","onChange","useInput","init","setValue","updateValue","newValue","LocationItems","list","map","item","LocationsList","handleSelect","getFixedTemp","temp","Number","toFixed","convertUnixTimestamp","timestamp","Date","getLocaleTimeString","data","toLocaleTimeString","hour","minute","getLocaleString","localStr","toLocaleString","weekday","month","day","getDateTimeString","convertedTimestamp","dateStamp","lastIndex","lastIndexOf","slice","FORECAST_API_KEY","process","BASE_FORECAST_URL","autoCompleteSearch","query","url","fetch","then","response","json","parseForecastData","parsedData","current","forecast","daily","dt","feels_like","i","length","weeklyDT","sunrise","sunset","night","getForecastData","EXCLUDES","URL","lat","lon","forecastData","LocationSearch","currentLocation","locationDispatch","tempLocations","setTempLocations","inputValue","handleInputChange","updateInputValue","a","preventDefault","locationsArr","locationsSplit","tempSplit","split","tempFinal","push","dataCoords","handleLocationSelect","selectedLocation","find","loc","payload","ForecastViewMenu","currentView","handleSelection","classBase","viewClasses","today","tomorrow","weekly","CurrentForecast","unitTypeSymbol","currentDay","city","feelsLike","weather","date","sunriseTimestamp","sunsetTimestamp","imgPath","main","AdditionalInfo","info","chanceOfRain","humidity","uvi","ForecastDay","additionalInfoID","handleDaySelect","weeklyDate","dayTempMax","max","dayTempMin","min","forecastDayClasses","description","ForecastWeekly","setAdditionalInfoID","handleForecastSelect","currentTarget","newID","forecastList","ForecastView","setCurrentView","imperial","metric","kelvin","forecastInit","temperatureUnitType","forecastReducer","state","action","RainOrShine","props","useReducer","dispatch","parsedForecast","useEffect","getForecast","role","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76118f92.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Icon({ imgData }) {\r\n  const imgClasses = imgData.addClasses ? `icon ${imgData.addClasses}` : \"icon\";\r\n\r\n  return (\r\n    <img\r\n      className={imgClasses}\r\n      src={`${imgData.path}.svg`}\r\n      alt={`${imgData.alt}`}\r\n    />\r\n  );\r\n}\r\n\r\nIcon.propTypes = {\r\n  imgData: PropTypes.shape({\r\n    addClasses: PropTypes.string,\r\n    path: PropTypes.string.isRequired,\r\n    alt: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\n//* returns degree symbol\r\n//* optional - adds unit type (ex. 'F' for fahrenheit, 'C' for celsius)\r\nfunction DegreeSymbol({ unitType = \"\" }) {\r\n  const symbol = String.fromCharCode(176) + unitType;\r\n\r\n  return <sup className=\"degree-symbol\">{symbol}</sup>;\r\n}\r\n\r\nDegreeSymbol.propTypes = {\r\n  unitType: propTypes.string,\r\n};\r\n\r\nexport default DegreeSymbol;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Icon from \"./Icon\";\r\nimport DegreeSymbol from \"./DegreeSymbol\";\r\n\r\n//* menu that deals with updating the unit type\r\nfunction Menu({ handleUnitUpdate }) {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const imgData = {\r\n    path: \"assets/nav/settings\",\r\n    alt: \"settings menu icon\",\r\n  };\r\n\r\n  function handleNewUnitType(e) {\r\n    if (!e) return;\r\n\r\n    const newUnitType = e.target.id;\r\n\r\n    setIsActive(false); //* toggles off menu\r\n    handleUnitUpdate(newUnitType);\r\n  }\r\n\r\n  return (\r\n    <menu className=\"menu\">\r\n      <button className=\"btn\" onClick={() => setIsActive(!isActive)}>\r\n        <Icon imgData={imgData} />\r\n      </button>\r\n      {isActive && (\r\n        <div className=\"menu__extended\">\r\n          <span className=\"menu-title\">Select unit type:</span>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"imperial\"\r\n              name=\"unitType\"\r\n              value=\"imperial\"\r\n              onClick={handleNewUnitType}\r\n            />\r\n            <label htmlFor=\"imperial\">\r\n              <DegreeSymbol unitType=\"F\" />\r\n              <span> - imperial</span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"metric\"\r\n              name=\"unitType\"\r\n              value=\"metric\"\r\n              onClick={handleNewUnitType}\r\n            />\r\n            <label htmlFor=\"metric\">\r\n              <DegreeSymbol unitType=\"C\" />\r\n              <span> - metric</span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"kelvin\"\r\n              name=\"unitType\"\r\n              value=\"kelvin\"\r\n              onClick={handleNewUnitType}\r\n            />\r\n            <label htmlFor=\"kelvin\">\r\n              <DegreeSymbol unitType=\"K\" />\r\n              <span> - kelvin</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </menu>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  handleUnitUpdate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Menu;\r\n","//TODO: used with back-arrow / menu / search icons\r\n//*   pass in icon path and callback\r\n//*   callback triggered onClick\r\n\r\nimport react from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst icons = {\r\n  arrow_back: {\r\n    src: \"assets/nav/arrow_back.svg\",\r\n    alt: \"back arrow - clears search query\",\r\n  },\r\n  search: {\r\n    src: \"assets/nav/search.svg\",\r\n    alt: \"searches for location\",\r\n  },\r\n};\r\n\r\nfunction IconBtn({ icon, type, handleClick }) {\r\n  return (\r\n    <button className=\"icon-btn\" type={type} onClick={handleClick}>\r\n      <img\r\n        className=\"icon-btn__icon\"\r\n        src={icons[icon].src}\r\n        alt={icons[icon].alt}\r\n      />\r\n    </button>\r\n  );\r\n}\r\n\r\nIconBtn.propTypes = {\r\n  icon: PropTypes.string.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default IconBtn;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconBtn from \"./IconBtn\";\r\n\r\nfunction Inputfield({\r\n  value,\r\n  handleChange,\r\n  handleClear,\r\n  handleSubmit,\r\n  placeholder,\r\n}) {\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <IconBtn icon=\"arrow_back\" type=\"button\" handleClick={handleClear} />\r\n      <input\r\n        type=\"text\"\r\n        className=\"form__input\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        placeholder={placeholder}\r\n      />\r\n      <IconBtn icon=\"search\" type=\"button\" handleClick={handleSubmit} />\r\n    </form>\r\n  );\r\n}\r\n\r\nInputfield.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleClear: PropTypes.func.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default Inputfield;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction useInput(init = \"\") {\r\n  const [value, setValue] = useState(init);\r\n\r\n  function handleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  //* used to manually set value\r\n  function updateValue(newValue) {\r\n    setValue(newValue);\r\n  }\r\n\r\n  return [value, handleChange, updateValue];\r\n}\r\n\r\nexport default useInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//* renders the list of locations from the search api\r\nfunction LocationItems({ list }) {\r\n  if (!list) return null;\r\n\r\n  return list.map((item) => (\r\n    <li key={item.id} className=\"loc-item\" id={item.id}>\r\n      {item.name}\r\n    </li>\r\n  ));\r\n}\r\n\r\nfunction LocationsList({ list, handleSelect }) {\r\n  return (\r\n    <ul className=\"loc-list\" onClick={handleSelect}>\r\n      <LocationItems list={list} />\r\n    </ul>\r\n  );\r\n}\r\n\r\nLocationsList.propTypes = {\r\n  list: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      dataCoords: PropTypes.object.isRequired,\r\n    })\r\n  ),\r\n  handleSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LocationsList;\r\n","export function getUnitType(typeName) {\r\n  const typeConversion = {\r\n    imperial: \"F\",\r\n    metric: \"C\",\r\n    kelvin: \"K\",\r\n  };\r\n\r\n  return typeConversion[typeName];\r\n}\r\n\r\n//* returns temperature without decimals\r\nexport function getFixedTemp(temp) {\r\n  temp = Number(temp);\r\n  return `${temp.toFixed(0)}`;\r\n}\r\n\r\n//* returns the millisecond conversion of the api timestamp\r\nexport function convertUnixTimestamp(timestamp) {\r\n  const convertedTimestamp = new Date(timestamp * 1000);\r\n  return convertedTimestamp;\r\n}\r\n\r\nexport function getLocaleTimeString(data) {\r\n  const options = { hour: \"2-digit\", minute: \"2-digit\" };\r\n  const timestamp = convertUnixTimestamp(data);\r\n  return timestamp.toLocaleTimeString([], options);\r\n}\r\n\r\n//* returns weekday, month & numeric day\r\nexport function getLocaleString(temp) {\r\n  const timestampOpts = {\r\n    weekday: \"long\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  };\r\n\r\n  let localStr = convertUnixTimestamp(temp);\r\n  localStr = localStr.toLocaleString(\"en-US\", timestampOpts);\r\n\r\n  return localStr;\r\n}\r\n\r\n//* returns month day, current time\r\nexport function getDateTimeString(temp) {\r\n  let convertedTimestamp = convertUnixTimestamp(temp);\r\n\r\n  //* gets current month and day\r\n  let dateStamp = convertedTimestamp.toLocaleString(\"en-US\", {\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n\r\n  let timestamp = convertedTimestamp.toLocaleTimeString();\r\n  let lastIndex = timestamp.lastIndexOf(\":\");\r\n\r\n  //* month day, time (minus the seconds)\r\n  let finalTimestamp = `${dateStamp}, ${timestamp.slice(\r\n    0,\r\n    lastIndex\r\n  )} ${timestamp.slice(-2)}`;\r\n\r\n  return finalTimestamp;\r\n}\r\n","import {\r\n  getDateTimeString,\r\n  getFixedTemp,\r\n  getLocaleString,\r\n  getLocaleTimeString,\r\n} from \"./helpers/conversions\";\r\n\r\nconst SEARCH_API_KEY = process.env.REACT_APP_WEATHER_LOCATION_API_KEY;\r\nconst FORECAST_API_KEY = process.env.REACT_APP_WEATHER_FORECAST_API_KEY;\r\n\r\nconst BASE_SEARCH_URL = \"https://api.weatherapi.com/v1\";\r\nconst BASE_FORECAST_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\n//* returns array of location matches based on query\r\nexport function autoCompleteSearch(query) {\r\n  const url = `${BASE_SEARCH_URL}/search.json?key=${SEARCH_API_KEY}&q=${query}`;\r\n  const autoLocations = fetch(url).then((response) => response.json());\r\n\r\n  return autoLocations;\r\n}\r\n\r\n//* passed forecast api request data\r\n//* returns array of day objects\r\nexport function parseForecastData(data) {\r\n  //* data used as part of the parent state\r\n  const parsedData = {\r\n    current: data.current,\r\n    forecast: data.daily,\r\n  };\r\n\r\n  parsedData.current.dt = getDateTimeString(parsedData.current.dt);\r\n  parsedData.current.temp = getFixedTemp(parsedData.current.temp);\r\n  parsedData.current.feels_like = getFixedTemp(parsedData.current.feels_like);\r\n\r\n  for (let i = 0; i < parsedData.forecast.length; i++) {\r\n    const daily = parsedData.forecast[i];\r\n\r\n    daily.weeklyDT = getLocaleString(daily.dt);\r\n    daily.dt = getDateTimeString(daily.dt);\r\n    daily.temp.day = getFixedTemp(daily.temp.day);\r\n    daily.feels_like.day = getFixedTemp(daily.feels_like.day);\r\n\r\n    daily.sunrise = getLocaleTimeString(daily.sunrise);\r\n    daily.sunset = getLocaleTimeString(daily.sunset);\r\n\r\n    daily.temp.day = getFixedTemp(daily.temp.day);\r\n    daily.temp.night = getFixedTemp(daily.temp.night);\r\n\r\n    parsedData.forecast[i] = daily;\r\n  }\r\n\r\n  return parsedData;\r\n}\r\n\r\n//* returns array of days (objects) of forecast data based on query and days (max 10)\r\nexport function getForecastData(query, unitType = \"imperial\") {\r\n  const EXCLUDES = \"minutely,hourly,alerts\";\r\n  let url = \"\";\r\n\r\n  //* api doesn't need unit type for kevlin (default)\r\n  if (unitType === \"kelvin\") {\r\n    url = new URL(\r\n      `${BASE_FORECAST_URL}/onecall?lat=${query.lat}&lon=${query.lon}&exclude=${EXCLUDES}&appid=${FORECAST_API_KEY}`\r\n    );\r\n  } else {\r\n    url = new URL(\r\n      `${BASE_FORECAST_URL}/onecall?lat=${query.lat}&lon=${query.lon}&exclude=${EXCLUDES}&units=${unitType}&appid=${FORECAST_API_KEY}`\r\n    );\r\n  }\r\n\r\n  const forecastData = fetch(url).then((response) => response.json());\r\n\r\n  return forecastData;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Inputfield from \"./Inputfield\";\r\nimport useInput from \"./hooks/useInput\";\r\nimport LocationsList from \"./LocationsList\";\r\nimport { autoCompleteSearch } from \"./getWeatherData\";\r\n\r\nfunction LocationSearch({ currentLocation, locationDispatch }) {\r\n  const [tempLocations, setTempLocations] = useState(null);\r\n  const [inputValue, handleInputChange, updateInputValue] = useInput(\"\");\r\n\r\n  //* clears input and temp locations on arrow click\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    updateInputValue(\"\");\r\n    setTempLocations(null);\r\n  }\r\n\r\n  //* handles pulling the possible location matches from the city search & updating the match-state\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (inputValue === \"\") return;\r\n\r\n    const locationsArr = await autoCompleteSearch(inputValue);\r\n\r\n    //* stores only the city, state out of the location name\r\n    let locationsSplit = [];\r\n    for (let i = 0; i < locationsArr.length; i++) {\r\n      const tempSplit = locationsArr[i].name.split(\",\");\r\n      const tempFinal = tempSplit[0] + \",\" + tempSplit[1];\r\n\r\n      locationsSplit.push({\r\n        name: tempFinal,\r\n        id: `${locationsArr[i].id}`,\r\n        dataCoords: {\r\n          lat: locationsArr[i].lat,\r\n          lon: locationsArr[i].lon,\r\n        },\r\n      });\r\n    }\r\n\r\n    setTempLocations(locationsSplit);\r\n  }\r\n\r\n  //* clears out the temporary locations from city search & gets\r\n  //* ready for requesting the forecast data for the selected city\r\n  function handleLocationSelect(e) {\r\n    e.preventDefault();\r\n    const { id } = e.target;\r\n\r\n    if (id) {\r\n      const selectedLocation = tempLocations.find((loc) => loc.id === id);\r\n      const payload = {\r\n        name: selectedLocation.name,\r\n        dataCoords: selectedLocation.dataCoords,\r\n      };\r\n\r\n      locationDispatch({ type: \"new location\", payload: payload });\r\n      setTempLocations(null);\r\n      updateInputValue(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"loc-search\" onClick={handleLocationSelect}>\r\n      <Inputfield\r\n        value={inputValue}\r\n        handleChange={handleInputChange}\r\n        handleClear={handleClear}\r\n        handleSubmit={handleSubmit}\r\n        placeholder={currentLocation}\r\n      />\r\n\r\n      <LocationsList list={tempLocations} handleSelect={handleLocationSelect} />\r\n    </div>\r\n  );\r\n}\r\n\r\nLocationSearch.propTypes = {\r\n  currentLocation: PropTypes.string,\r\n  locationDispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LocationSearch;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ForecastViewMenu({ currentView, handleSelection }) {\r\n  const classBase = \"current-forecast-item\";\r\n  const viewClasses = {\r\n    today: currentView === \"today\" ? `${classBase}--active` : classBase,\r\n    tomorrow: currentView === \"tomorrow\" ? `${classBase}--active` : classBase,\r\n    weekly: currentView === \"weekly\" ? `${classBase}--active` : classBase,\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"current-forecast-list\" onClick={handleSelection}>\r\n        <li id=\"today\" className={viewClasses.today}>\r\n          today\r\n        </li>\r\n        <li id=\"tomorrow\" className={viewClasses.tomorrow}>\r\n          tomorrow\r\n        </li>\r\n        <li id=\"weekly\" className={viewClasses.weekly}>\r\n          weekly\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nForecastViewMenu.propTypes = {\r\n  currentView: PropTypes.string.isRequired,\r\n  handleSelection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ForecastViewMenu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport DegreeSymbol from \"./DegreeSymbol\";\r\nimport Icon from \"./Icon\";\r\n\r\nfunction CurrentForecast({ unitTypeSymbol, currentDay, forecast, city }) {\r\n  if (!forecast) return null;\r\n\r\n  let temp = null;\r\n  let feelsLike = null;\r\n  let weather = null;\r\n  let date = null;\r\n  let sunriseTimestamp = null;\r\n  let sunsetTimestamp = null;\r\n\r\n  //* data pulled from forecast (tomorrow selected)\r\n  //* everything pulled based on day-time\r\n  if (!currentDay) {\r\n    temp = forecast[1].temp.day;\r\n    feelsLike = forecast[1].feels_like.day;\r\n    weather = forecast[1].weather[0];\r\n    date = forecast[1].dt;\r\n    sunriseTimestamp = forecast[1].sunrise;\r\n    sunsetTimestamp = forecast[1].sunset;\r\n  }\r\n\r\n  //* pulled from current day (today selected)\r\n  else {\r\n    temp = currentDay.temp;\r\n    feelsLike = currentDay.feels_like;\r\n    weather = currentDay.weather[0];\r\n    date = currentDay.dt;\r\n    sunriseTimestamp = forecast[0].sunrise;\r\n    sunsetTimestamp = forecast[0].sunset;\r\n  }\r\n\r\n  const sunsetImgData = {\r\n    path: \"assets/weather-icons/sunset\",\r\n    alt: \"sunset icon\",\r\n  };\r\n  const sunriseImgData = {\r\n    path: \"assets/weather-icons/sunrise\",\r\n    alt: \"sunrise icon\",\r\n  };\r\n  const tempImgData = {\r\n    path: \"assets/weather-icons/temperature\",\r\n    alt: \"temperature icon\",\r\n  };\r\n\r\n  const imgPath = `assets/weather-icons/${weather.icon}`;\r\n\r\n  return (\r\n    <div className=\"current-forecast\">\r\n      <div className=\"date\">{date}</div>\r\n      <div className=\"city\">{city}</div>\r\n      <div className=\"description\">{weather.main}</div>\r\n      <div className=\"icon-wrapper\">\r\n        <img\r\n          className=\"icon\"\r\n          src={`${imgPath}.svg`}\r\n          alt=\"weather status icon\"\r\n        />\r\n\r\n        <div className=\"current-temp\">\r\n          {temp}\r\n          <DegreeSymbol unitType={unitTypeSymbol} />\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      <div className=\"info\">\r\n        <div className=\"feels-like\">\r\n          <Icon imgData={tempImgData} />\r\n          <div>\r\n            {`Feels like ${feelsLike}`}\r\n            <DegreeSymbol />\r\n          </div>\r\n        </div>\r\n        <div className=\"sunrise\">\r\n          <Icon imgData={sunriseImgData} />\r\n          {sunriseTimestamp}\r\n        </div>\r\n        <div className=\"sunset\">\r\n          <Icon imgData={sunsetImgData} />\r\n          {sunsetTimestamp}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCurrentForecast.propTypes = {\r\n  unitTypeSymbol: PropTypes.string.isRequired,\r\n  currentDay: PropTypes.object,\r\n  forecast: PropTypes.array,\r\n  city: PropTypes.string,\r\n};\r\n\r\nexport default CurrentForecast;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { getFixedTemp } from \"./helpers/conversions\";\r\n\r\n//* renders additional info for the current day selected out of the forecast weekly list\r\nfunction AdditionalInfo({ info }) {\r\n  //* renders only if it's likely to rain\r\n  const chanceOfRain = getFixedTemp(info[\"pop\"] * 100);\r\n\r\n  return (\r\n    <div className=\"additional-info\">\r\n      {chanceOfRain > 0 && (\r\n        <span className=\"chance-of-rain\">{`Chance of rain: ${chanceOfRain}%`}</span>\r\n      )}\r\n      <span className=\"humidity\">{`Humidity: ${info.humidity}%`}</span>\r\n      <span className=\"uv-index\">{`UV Index: ${info.uvi}`}</span>\r\n      <span className=\"sunset-sunrise\">{`Sunrise/Sunset: ${info.sunrise}, ${info.sunset}`}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nAdditionalInfo.propTypes = {\r\n  info: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default AdditionalInfo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { getFixedTemp } from \"../components/helpers/conversions\";\r\nimport DegreeSymbol from \"./DegreeSymbol\";\r\nimport Icon from \"./Icon\";\r\nimport AdditionalInfo from \"./AdditionalInfo\";\r\n\r\nfunction ForecastDay({ day, additionalInfoID, handleDaySelect }) {\r\n  const imgBasePath = \"assets/weather-icons/\";\r\n  const weeklyDate = day.weeklyDT;\r\n  const weather = day.weather[0];\r\n  const dayTempMax = getFixedTemp(day.temp.max);\r\n  const dayTempMin = getFixedTemp(day.temp.min);\r\n  const imgData = {\r\n    addClasses: \"forecast-day__icon\",\r\n    path: `${imgBasePath}/${weather.icon}`,\r\n    alt: \"weather icon\",\r\n  };\r\n\r\n  const arrowImgData = {\r\n    addClasses: \"arrow-down\",\r\n    path: `assets/nav/arrow_down`,\r\n    alt: \"expands / closes additional weather info\",\r\n  };\r\n\r\n  const forecastDayClasses =\r\n    additionalInfoID === weeklyDate ? \"forecast-day toggled\" : \"forecast-day\";\r\n\r\n  return (\r\n    <li\r\n      className={forecastDayClasses}\r\n      id={weeklyDate}\r\n      onClick={handleDaySelect}\r\n    >\r\n      <div className=\"forecast-day__date\">{weeklyDate}</div>\r\n      <div className=\"forecast-day__status\">{weather.description}</div>\r\n      <Icon imgData={imgData} />\r\n      <div className=\"forecast-day__max\">\r\n        {dayTempMax}\r\n        <DegreeSymbol />\r\n      </div>\r\n      <div className=\"forecast-day__min\">\r\n        {dayTempMin}\r\n        <DegreeSymbol />\r\n      </div>\r\n      <Icon imgData={arrowImgData} />\r\n\r\n      {additionalInfoID === weeklyDate && <AdditionalInfo info={day} />}\r\n    </li>\r\n  );\r\n}\r\n\r\nForecastDay.propTypes = {\r\n  day: PropTypes.object.isRequired,\r\n  additionalInfoID: PropTypes.string,\r\n  handleDaySelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ForecastDay;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ForecastDay from \"./ForecastDay\";\r\n\r\nfunction ForecastWeekly({ forecast }) {\r\n  const [additionalInfoID, setAdditionalInfoID] = useState(null);\r\n  if (!forecast) return null;\r\n\r\n  //* called when a forecast day is selected (only one selected at a time)\r\n  //* updates the current selected forecast day, displaying the additional info\r\n  function handleForecastSelect(e) {\r\n    if (!e) return;\r\n\r\n    const id = e.currentTarget.id;\r\n    let newID = null;\r\n\r\n    if (additionalInfoID !== id) {\r\n      newID = id;\r\n    }\r\n\r\n    setAdditionalInfoID(newID);\r\n  }\r\n\r\n  const forecastList = forecast.map((day) => (\r\n    <ForecastDay\r\n      key={day.dt}\r\n      day={day}\r\n      additionalInfoID={additionalInfoID}\r\n      handleDaySelect={handleForecastSelect}\r\n    />\r\n  ));\r\n\r\n  return <ul className=\"forecast-weekly\">{forecastList}</ul>;\r\n}\r\n\r\nForecastWeekly.propTypes = {\r\n  forecast: PropTypes.array,\r\n};\r\n\r\nexport default ForecastWeekly;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ForecastViewMenu from \"./ForecastViewMenu\";\r\nimport CurrentForecast from \"./CurrentForecast\";\r\nimport ForecastWeekly from \"./ForecastWeekly\";\r\n\r\nimport { getUnitType } from \"./helpers/conversions\";\r\n\r\nfunction ForecastView({ unitType, currentDay, forecast, currentLocation }) {\r\n  const [currentView, setCurrentView] = useState(\"today\");\r\n  let city = null;\r\n  let unitTypeSymbol = getUnitType(unitType);\r\n\r\n  //* pulls city out of the current location if it exists\r\n  if (currentLocation) {\r\n    city = currentLocation.split(\",\")[0];\r\n  }\r\n\r\n  function handleSelection(e) {\r\n    const { id } = e.target;\r\n\r\n    if (id) {\r\n      switch (id) {\r\n        case \"today\":\r\n          setCurrentView(\"today\");\r\n          break;\r\n        case \"tomorrow\":\r\n          setCurrentView(\"tomorrow\");\r\n          break;\r\n        case \"weekly\":\r\n          setCurrentView(\"weekly\");\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"forecast-view\">\r\n      <ForecastViewMenu\r\n        currentView={currentView}\r\n        handleSelection={handleSelection}\r\n      />\r\n      {currentView === \"weekly\" && <ForecastWeekly forecast={forecast} />}\r\n      {currentView === \"today\" && (\r\n        <CurrentForecast\r\n          unitTypeSymbol={unitTypeSymbol}\r\n          currentDay={currentDay}\r\n          forecast={forecast}\r\n          city={city}\r\n        />\r\n      )}\r\n      {currentView === \"tomorrow\" && (\r\n        <CurrentForecast\r\n          unitTypeSymbol={unitTypeSymbol}\r\n          forecast={forecast}\r\n          city={city}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nForecastView.propTypes = {\r\n  unitType: PropTypes.string.isRequired,\r\n  currentDay: PropTypes.object,\r\n  forecast: PropTypes.array,\r\n  currentLocation: PropTypes.string,\r\n};\r\n\r\nexport default ForecastView;\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport Menu from \"./components/Menu\";\r\nimport LocationSearch from \"./components/LocationSearch\";\r\nimport ForecastView from \"./components/ForecastView\";\r\nimport {\r\n  getForecastData,\r\n  parseForecastData,\r\n} from \"./components/getWeatherData\";\r\n\r\nimport \"./RainOrShine.css\";\r\n\r\nconst forecastInit = {\r\n  currentLocation: {\r\n    name: null,\r\n    dataCoords: null,\r\n  },\r\n  temperatureUnitType: \"imperial\", //* defaults to fahrenheit\r\n  currentDay: null,\r\n  forecast: null,\r\n};\r\n\r\nfunction forecastReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"new location\":\r\n      return {\r\n        currentLocation: action.payload,\r\n        temperatureUnitType: state.temperatureUnitType,\r\n        currentDay: null,\r\n        forecast: null,\r\n      };\r\n\r\n    case \"update forecast\":\r\n      return {\r\n        ...state,\r\n        currentDay: action.payload.current,\r\n        forecast: action.payload.forecast,\r\n      };\r\n\r\n    case \"update unit type\":\r\n      //* unit type changed\r\n      if (state.temperatureUnitType !== action.payload.unitType) {\r\n        const newUnitType = action.payload.unitType;\r\n\r\n        return {\r\n          currentLocation: state.currentLocation,\r\n          temperatureUnitType: newUnitType,\r\n          currentDay: action.payload.weather.current,\r\n          forecast: action.payload.weather.forecast,\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction RainOrShine(props) {\r\n  const [state, dispatch] = useReducer(forecastReducer, forecastInit);\r\n\r\n  useEffect(() => {\r\n    async function getForecast() {\r\n      const forecastData = await getForecastData(\r\n        state.currentLocation.dataCoords,\r\n        state.temperatureUnitType\r\n      );\r\n\r\n      if (!forecastData) return;\r\n\r\n      const parsedForecast = parseForecastData(forecastData);\r\n      dispatch({ type: \"update forecast\", payload: parsedForecast });\r\n    }\r\n\r\n    if (state.currentLocation.dataCoords) {\r\n      getForecast();\r\n    }\r\n  }, [state.currentLocation.dataCoords]);\r\n\r\n  //* if unit type changes, this requests the new forecast\r\n  //* w/updated unit types. Then\r\n  async function handleUnitUpdate(unitType) {\r\n    if (!unitType) return;\r\n\r\n    //* unit type changed\r\n    if (unitType !== state.temperatureUnitType) {\r\n      const forecastData = await getForecastData(\r\n        state.currentLocation.dataCoords,\r\n        unitType\r\n      );\r\n\r\n      if (!forecastData) return;\r\n\r\n      const parsedForecast = parseForecastData(forecastData);\r\n      dispatch({\r\n        type: \"update unit type\",\r\n        payload: { weather: parsedForecast, unitType: unitType },\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main role=\"main\" className=\"rain-or-shine\">\r\n      <LocationSearch\r\n        currentLocation={state.currentLocation.name}\r\n        locationDispatch={dispatch}\r\n      />\r\n      <ForecastView\r\n        unitType={state.temperatureUnitType}\r\n        currentDay={state.currentDay}\r\n        forecast={state.forecast}\r\n        currentLocation={state.currentLocation.name}\r\n      />\r\n      <Menu handleUnitUpdate={handleUnitUpdate} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RainOrShine;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RainOrShine from \"./RainOrShine\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n//TODO: replace all base code BEFORE running\n//*       - including icon\n\nReactDOM.render(\n  <React.StrictMode>\n    <RainOrShine />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}